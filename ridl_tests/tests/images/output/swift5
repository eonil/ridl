ItemType {
    attrs: [],
    vis: Inherited,
    type_token: Type,
    ident: Ident {
        sym: Tuna,
        span: bytes(28..32),
    },
    generics: Generics {
        lt_token: None,
        params: [],
        gt_token: None,
        where_clause: None,
    },
    eq_token: Eq,
    ty: Path(
        TypePath {
            qself: None,
            path: Path {
                leading_colon: None,
                segments: [
                    PathSegment {
                        ident: Ident {
                            sym: String,
                            span: bytes(35..41),
                        },
                        arguments: None,
                    },
                ],
            },
        },
    ),
    semi_token: Semi,
}
ItemType {
    attrs: [],
    vis: Inherited,
    type_token: Type,
    ident: Ident {
        sym: Salmon,
        span: bytes(48..54),
    },
    generics: Generics {
        lt_token: None,
        params: [],
        gt_token: None,
        where_clause: None,
    },
    eq_token: Eq,
    ty: Path(
        TypePath {
            qself: None,
            path: Path {
                leading_colon: None,
                segments: [
                    PathSegment {
                        ident: Ident {
                            sym: String,
                            span: bytes(57..63),
                        },
                        arguments: None,
                    },
                ],
            },
        },
    ),
    semi_token: Semi,
}
ItemType {
    attrs: [
        Attribute {
            pound_token: Pound,
            style: Outer,
            bracket_token: Bracket,
            path: Path {
                leading_colon: None,
                segments: [
                    PathSegment {
                        ident: Ident {
                            sym: rest,
                            span: bytes(218..222),
                        },
                        arguments: None,
                    },
                ],
            },
            tokens: TokenStream [
                Group {
                    delimiter: Parenthesis,
                    stream: TokenStream [
                        Ident {
                            sym: GET,
                            span: bytes(223..226),
                        },
                        Punct {
                            char: ',',
                            spacing: Alone,
                            span: bytes(226..227),
                        },
                        Literal {
                            lit: "/pet/dish",
                            span: bytes(227..238),
                        },
                    ],
                    span: bytes(222..239),
                },
            ],
        },
    ],
    vis: Inherited,
    type_token: Type,
    ident: Ident {
        sym: pet_dish,
        span: bytes(246..254),
    },
    generics: Generics {
        lt_token: None,
        params: [],
        gt_token: None,
        where_clause: None,
    },
    eq_token: Eq,
    ty: TraitObject(
        TypeTraitObject {
            dyn_token: Some(
                Dyn,
            ),
            bounds: [
                Trait(
                    TraitBound {
                        paren_token: None,
                        modifier: None,
                        lifetimes: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: Fn,
                                        span: bytes(261..263),
                                    },
                                    arguments: Parenthesized(
                                        ParenthesizedGenericArguments {
                                            paren_token: Paren,
                                            inputs: [
                                                Path(
                                                    TypePath {
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Pet,
                                                                        span: bytes(264..267),
                                                                    },
                                                                    arguments: None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ),
                                            ],
                                            output: Type(
                                                RArrow,
                                                Path(
                                                    TypePath {
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Dish,
                                                                        span: bytes(272..276),
                                                                    },
                                                                    arguments: None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                },
                            ],
                        },
                    },
                ),
            ],
        },
    ),
    semi_token: Semi,
}
/// Here be dragons.
typealias Tuna = String

typealias Salmon = String

/// Ingredients of magic.
enum Mineral: String, Equatable, Codable {
    case IronMetal = "IronMetal"
    case Alumina = "Alumina"
    case Arcana = "Arcana"
}

typealias pet_dish = (Pet) -> (Dish)

struct Pet: Equatable, Codable {
    var name: [String]
    /// Did they take a walk today?
    var walk: Bool
    var living_address: Address?
    var contents: [u8]
}

struct Address: Equatable, Codable {
    var city: String
}

/// Edibles.
enum Dish: Equatable, Codable {
    case Sushi(Tuna)
    /// Good salmons are reddish.
    case PanFriedSteak(Salmon)
}

struct APIError: Equatable, Codable {
    var message: String
}
